#include "timer_contexts.hpp"

//--------------------------------------------------------------------------------------------------
static constexpr auto gValue = 10000000ull;
static const auto gTaskCount = int(oqpi::thread::hardware_concurrency());
//--------------------------------------------------------------------------------------------------


//--------------------------------------------------------------------------------------------------
uint64_t fibonacci(uint64_t n)
{
    uint64_t a = 1, b = 1;
    for (uint64_t i = 3; i <= n; ++i)
    {
        uint64_t c = a + b;
        a = b;
        b = c;
    }
    return b;
}
//--------------------------------------------------------------------------------------------------


//--------------------------------------------------------------------------------------------------
struct test
{
    test(const char *functionName)
    {
        std::cout << "-------------------------------------------------------------------" << std::endl;
        std::cout << functionName << std::endl;
        std::cout << "-------------------------------------------------------------------" << std::endl;
    }

    ~test()
    {
        timing_registry::get().dump();
        timing_registry::get().reset();
        std::cout << "-------------------------------------------------------------------" << std::endl;
        std::cout << std::endl << std::endl;
    }
};
//--------------------------------------------------------------------------------------------------
#define TEST_FUNC test __t(__FUNCTION__)
//--------------------------------------------------------------------------------------------------
